@page "/"
@inject IJSRuntime Js
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.RegularExpressions
@using BlazorBootstrap;
@using DeBron.PowerPoint.Builder.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<script src="js/utils.js"></script>

<PageTitle>debron Presentatie Generator</PageTitle>

<h1>debron Presentatie Generator</h1>

Voeg hieronder nummers toe.

<table class="table">
    <thead>
    <tr>
        <th>Naam</th>
        <th>Ondertitel/Artiest</th>
        <th>
            <Button Color="ButtonColor.Secondary" @onclick="ClearSongs">Verwijder alles</Button>
        </th>
    </tr>
    </thead>
    <tbody>
    @foreach (var song in @_songs)
    {
        <tr>
            <td>@song.Name</td>
            <td>@song.Subtitle</td>
            <td>
                <div class="d-flex flex-row justify-content-end gap-1">
                    <Button Color="ButtonColor.Light" TooltipTitle="Pas aan" @onclick="() => EditSong(song)"><Icon Name="IconName.Pen"></Icon></Button>
                    <Button Color="ButtonColor.Light" TooltipTitle="Verwijder" @onclick="() => RemoveSong(song)"><Icon Name="IconName.Trash"></Icon></Button>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
<div class="flex-column gap-1">
    <Button Color="ButtonColor.Secondary" @onclick="AddSong">Voeg nummer toe</Button>
    <Button Color="ButtonColor.Primary" @onclick="Build">Genereer presentatie</Button>
</div>

<form @onsubmit="OnSubmit">
    <Dialog Title="Voeg nummer toe" OkButtonType="ButtonType.Submit" Opened="_addSongDialogOpen" CloseButtonClicked="CloseDialog" OkText="Sla op">
        <div class="flex-column flex-grow-1 gap-1">
            <label class="flex-column">
                Naam
                <InputText @bind-Value="Song.Name"></InputText>
            </label>
            <label class="flex-column">
                Ondertitel/Artiest
                <InputText @bind-Value="Song.Subtitle"></InputText>
            </label>
            <label class="flex-column flex-grow-1">
                Songtekst (lege regel voor nieuwe dia, 4 lege regels voor lege dia ertussen)
                <InputTextArea id="lyricsTextArea" @bind-Value="Song.Lyrics" class="flex-grow-1" ></InputTextArea>
            </label>
        </div>
    </Dialog>
</form>

@code {
    private List<Song> _songs = [];
    private bool _addSongDialogOpen;
    private bool _renderedDialog = false;
    private Song Song { get; set; } = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_addSongDialogOpen && !_renderedDialog)
        {
            _renderedDialog = true;
            await Js.InvokeVoidAsync("registerPasteHandler", DotNetObjectReference.Create(this), "lyricsTextArea");
        }
        
        if (firstRender)
        {
            // Laad de nummers uit localStorage
            var savedSongs = await Js.InvokeAsync<string>("localStorageFunctions.getItem", "songs");
            if (!string.IsNullOrEmpty(savedSongs))
            {
                _songs = JsonSerializer.Deserialize<List<Song>>(savedSongs) ?? [];
            }
            
            StateHasChanged();
        }
    }
    
    private void CloseDialog()
    {
        _addSongDialogOpen = false;
        Song = new Song();
        _renderedDialog = false;
    }

    private void AddSong()
    {
        _addSongDialogOpen = true;
    }
    
    private void EditSong(Song song)
    {
        Song = song;
        _addSongDialogOpen = true;
    }
    
    private void RemoveSong(Song song)
    {
        _songs.Remove(song);
        
        // Sla de nummers op in localStorage
        Js.InvokeVoidAsync("localStorageFunctions.setItem", "songs", JsonSerializer.Serialize(_songs));
    }
    
    private async Task OnSubmit()
    {
        if (_songs.Any(s => s.Id == Song.Id))
        {
            var existingSong = _songs.First(s => s.Id == Song.Id);
            existingSong.Name = Song.Name;
            existingSong.Subtitle = Song.Subtitle;
            existingSong.Lyrics = Song.Lyrics;
        }
        else
        {
            _songs.Add(Song);
        }
        
        Song = new Song();
        _addSongDialogOpen = false;
        
        // Sla de nummers op in localStorage
        await Js.InvokeVoidAsync("localStorageFunctions.setItem", "songs", JsonSerializer.Serialize(_songs));
    }

    private async Task ClearSongs()
    {
        _songs.Clear();
        await Js.InvokeVoidAsync("localStorageFunctions.removeItem", "songs");
    }

    private async Task Build()
    {
        var fileName = PresentationBuilder.Build(_songs);

        var stream = File.Open(fileName, FileMode.Open, FileAccess.Read);
        
        using var streamRef = new DotNetStreamReference(stream);

        await Js.InvokeVoidAsync("downloadHelper.downloadFileFromStream", "presentation.pptx", streamRef);
        
        File.Delete(fileName);
    }

    [JSInvokable]
    public Task<string> HandlePaste(string pastedText)
    {
        if (!string.IsNullOrWhiteSpace(Song.Lyrics)) return Task.FromResult(string.Empty);
        
        var transformed = TransformPastedText(pastedText);
        Song.Lyrics = transformed;
        StateHasChanged(); // Update de UI
        return Task.FromResult(transformed);
    }

    private static string TransformPastedText(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        // Stap 1: Normalizeer naar \n
        input = input.Replace("\r\n", "\n").Replace("\r", "\n");

        // Stap 2: Vervang 5 of meer newlines door 4
        input = Regex.Replace(input, @"(\n){6,}", "\n\n\n\n\n");

        // Stap 3: Vervang exact 3 newlines door 2
        input = Regex.Replace(input, @"(?<!\n)(\n){4}(?!\n)", "\n\n\n");

        // Stap 4: Voeg witregel toe na elke 2 niet-lege regels als er nog een derde volgt
        var lines = input.Split('\n');
        var result = new List<string>();
        int bufferCount = 0;

        for (int i = 0; i < lines.Length; i++)
        {
            string line = lines[i];
            result.Add(line);

            if (!string.IsNullOrWhiteSpace(line))
            {
                bufferCount++;
            }
            else
            {
                bufferCount = 0;
            }

            bool nextExists = i + 1 < lines.Length;
            if (bufferCount == 2 && nextExists && !string.IsNullOrWhiteSpace(lines[i + 1]))
            {
                result.Add(""); // witregel
                bufferCount = 0;
            }
        }

        return string.Join("\n", result);
    }
}