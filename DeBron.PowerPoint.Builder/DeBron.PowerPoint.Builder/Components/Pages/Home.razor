@page "/"
@inject IJSRuntime Js
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.RegularExpressions
@using BlazorBootstrap;
@using DeBron.PowerPoint.Builder.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<script src="js/utils.js"></script>

<div class="flex-column gap-3">
    <PageTitle>debron Presentatie Generator</PageTitle>

    <h1>debron Presentatie Generator</h1>

    <label>
        Thema
        <InputText @oninput="@OnInputChanged" @bind-Value="_presentation.Theme"></InputText>
    </label>

    <SortableList Class="mb-3 sortableList"
                  Handle=".bb-sortable-list-handle"
                  TItem="PresentationPart"
                  Data="_presentation.Parts"
                  Context="item"
                  OnUpdate="@MoveParts"
                  EmptyText="Er zijn nog geen nummers toegevoegd.">

        <ItemTemplate>
            <div class="d-flex justify-content-start align-items-center">
                <div class="bb-sortable-list-handle pe-2">
                    <Icon Name="IconName.GripVertical"/>
                </div>
                <div class="d-flex flex-row flex-grow-1 gap-1 justify-content-between align-items-center">
                    
                    @switch (item)
                    {
                        case Song song:
                            <div>Lied met ondertiteling: <b>@song.Titel</b> - @song.Ondertitel</div>
                            break;
                        case Collection collection:
                            <div>
                                Collecte
                                <label>
                                    @ToLabel(nameof(collection.EersteDoel))
                                    <InputText @oninput="@OnInputChanged" @bind-Value="collection.EersteDoel"></InputText>
                                </label>
                                <label>
                                    @ToLabel(nameof(collection.TweedeDoel))
                                    <InputText @oninput="@OnInputChanged" @bind-Value="collection.TweedeDoel"></InputText>
                                </label>
                            </div>
                            break;
                        case Prayer:
                            <div>Gebed</div>
                            break;
                        case TrustAndGreeting:
                            <div>Vertrouwen & groet</div>
                            break;
                        case ChildrenMoment childrenMoment:
                            <label>
                                @ToLabel(nameof(childrenMoment.Koffermomenter))
                                <InputText @oninput="@OnInputChanged" @bind-Value="childrenMoment.Koffermomenter"></InputText>
                            </label>
                            break;
                        case BibleReading bibleReading:
                            <div class="d-flex flex-row flex-grow-1 gap-1 justify-content-between align-items-center">
                                <InputText @oninput="@OnInputChanged"
                                           @bind-Value="@bibleReading.Reader"></InputText>
                                <Dropdown Color="DropdownColor.Secondary">
                                    <DropdownToggleButton>@(bibleReading.BiblebookName ?? "Bijbelboek")</DropdownToggleButton>
                                    <DropdownMenu>
                                        @foreach (var book in Constants.Biblebooks.Keys)
                                        {
                                            <DropdownItem Type="DropdownItemType.Button" @onclick="() => { bibleReading.BiblebookName = book; }">
                                                @book
                                            </DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                                <NumberInput TValue="int?" @bind-Value="@bibleReading.Chapter" Placeholder="Hoofdstuk"/>
                                <NumberInput TValue="int?" @bind-Value="@bibleReading.StartVerse" Placeholder="Vanaf"/>
                                <NumberInput TValue="int?" @bind-Value="@bibleReading.EndVerse" Placeholder="t/m"/>
                            </div>
                            break;
                        default:
                            <span>@item.GetType().Name</span>
                            break;
                    }

                    <div>
                        @if (item is Song s)
                        {
                            <Button Color="ButtonColor.Light" TooltipTitle="Pas aan"
                                    @onclick="@(() => EditSong(s))">
                                <Icon Name="IconName.Pen"></Icon>
                            </Button>
                        }
                        <Button Color="ButtonColor.Light" TooltipTitle="Verwijder"
                                @onclick="@(() => RemovePart(item))">
                            <Icon Name="IconName.Trash"></Icon>
                        </Button>
                    </div>
                </div>
            </div>
        </ItemTemplate>

    </SortableList>

    <div class="flex-column gap-1">
        <Dropdown Color="DropdownColor.Secondary">
            <DropdownToggleButton>Voeg onderdeel toe</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Type="DropdownItemType.Button" @onclick="AddSong">Lied met ondertiteling</DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => AddPart(new Collection())">Collecte</DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => AddPart(new Prayer())">Gebed</DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => AddPart(new TrustAndGreeting())">Vertrouwen & groet</DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => AddPart(new ChildrenMoment())">Koffermoment</DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => AddPart(new BibleReading())">Bijbellezing</DropdownItem>
            </DropdownMenu>
        </Dropdown>
        <Button Color="ButtonColor.Danger" @onclick="ClearParts">Verwijder alles</Button>
        <Button @ref="_generateButton" Color="ButtonColor.Primary" @onclick="Generate">Genereer presentatie</Button>
    </div>
</div>

<form @onsubmit="OnSubmit">
    <Dialog Title="Voeg nummer toe" OkButtonType="ButtonType.Submit" Opened="_addSongDialogOpen" CloseButtonClicked="CloseDialog" OkText="Sla op">
        <div class="flex-column flex-grow-1 gap-1">
            <label class="flex-column">
                @ToLabel(nameof(Song.Titel))
                <InputText @bind-Value="Song.Titel"></InputText>
            </label>
            <label class="flex-column">
                @ToLabel(nameof(Song.Ondertitel))
                <InputText @bind-Value="Song.Ondertitel"></InputText>
            </label>
            <label class="flex-column flex-grow-1">
                @ToLabel(nameof(Song.Liedtekst)) (lege regel voor nieuwe dia, 2 lege regels voor lege dia ertussen)
                <InputTextArea id="lyricsTextArea" @bind-Value="Song.Liedtekst" class="flex-grow-1" ></InputTextArea>
            </label>
        </div>
    </Dialog>
</form>

@code {
    private Presentation _presentation = new();
    private bool _addSongDialogOpen;
    private bool _renderedDialog = false;
    private Song Song { get; set; } = new();
    private Button _generateButton = null!;
    private System.Timers.Timer? _debounceTimer;
    private readonly string _presentationThemeLocalStorageKey = "presentation_theme_v1";
    private readonly string _presentationPartsLocalStorageKey = "presentation_parts_v1";
    
    private readonly JsonSerializerOptions _serializeOptions = new()
    {
        Converters = { new PresentationPartConverter() },
        WriteIndented = true
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_addSongDialogOpen && !_renderedDialog)
        {
            _renderedDialog = true;
            await Js.InvokeVoidAsync("registerPasteHandler", DotNetObjectReference.Create(this), "lyricsTextArea");
        }
        
        if (firstRender)
        {
            var savedPresentationTheme = await Js.InvokeAsync<string>("localStorageFunctions.getItem", _presentationThemeLocalStorageKey);
            var savedPresentationParts = await Js.InvokeAsync<string>("localStorageFunctions.getItem", _presentationPartsLocalStorageKey);
            if (!string.IsNullOrEmpty(savedPresentationParts))
            {
                _presentation = new Presentation
                {
                    Theme = savedPresentationTheme.Trim(),
                    Parts = JsonSerializer.Deserialize<List<PresentationPart>>(savedPresentationParts, _serializeOptions) ?? new()
                };
            }
            
            StateHasChanged();
        }
    }

    private void OnInputChanged()
    {
        _debounceTimer?.Stop();
        _debounceTimer?.Dispose();

        _debounceTimer = new System.Timers.Timer(1000); // 1000 ms = 1 seconde
        _debounceTimer.Elapsed += async (_, _) =>
        {
            _debounceTimer?.Stop();
            _debounceTimer?.Dispose();

            await SavePartsToLocalStorage();
        };
        _debounceTimer.AutoReset = false;
        _debounceTimer.Start();
    }

    private async Task MoveParts(SortableListEventArgs args)
    {
        var itemToMove = _presentation.Parts[args.OldIndex];

        _presentation.Parts.RemoveAt(args.OldIndex);

        if (args.NewIndex < _presentation.Parts.Count)
            _presentation.Parts.Insert(args.NewIndex, itemToMove);
        else
            _presentation.Parts.Add(itemToMove);

        await SavePartsToLocalStorage();
    }
    
    private void CloseDialog()
    {
        _addSongDialogOpen = false;
        Song = new Song();
        _renderedDialog = false;
    }

    private async Task AddPart(PresentationPart part)
    {
        _presentation.Parts.Add(part);
        await SavePartsToLocalStorage();
    }

    private void AddSong()
    {
        _addSongDialogOpen = true;
    }
    
    private void EditSong(Song song)
    {
        Song = song;
        _addSongDialogOpen = true;
    }
    
    private async Task RemovePart(PresentationPart part)
    {
        _presentation.Parts.Remove(part);

        await SavePartsToLocalStorage();
    }
    
    private async Task OnSubmit()
    {
        var existingSong = _presentation.Parts.OfType<Song>().FirstOrDefault(s => s.Id == Song.Id); 
        
        if (existingSong != null)
        {
            existingSong.Titel = Song.Titel;
            existingSong.Ondertitel = Song.Ondertitel;
            existingSong.Liedtekst = Song.Liedtekst;
        }
        else
        {
            _presentation.Parts.Add(Song);
        }
        
        Song = new Song();
        _addSongDialogOpen = false;
        
        await SavePartsToLocalStorage();
    }
    
    private async Task SavePartsToLocalStorage()
    {
        await Js.InvokeVoidAsync("localStorageFunctions.setItem", _presentationThemeLocalStorageKey, _presentation.Theme);
        await Js.InvokeVoidAsync("localStorageFunctions.setItem", _presentationPartsLocalStorageKey, JsonSerializer.Serialize(_presentation.Parts, _serializeOptions));
    }

    private async Task ClearParts()
    {
        _presentation = new Presentation();
        await Js.InvokeVoidAsync("localStorageFunctions.removeItem", _presentationThemeLocalStorageKey);
        await Js.InvokeVoidAsync("localStorageFunctions.removeItem", _presentationPartsLocalStorageKey);
    }

    private async Task Generate()
    {
        var fileName = string.Empty;
        
        try
        {
            _generateButton.ShowLoading("Genereren...");

            fileName = new PresentationBuilder().Build(_presentation.Parts);

            var stream = File.Open(fileName, FileMode.Open, FileAccess.Read);

            using var streamRef = new DotNetStreamReference(stream);

            await Js.InvokeVoidAsync("downloadHelper.downloadFileFromStream", "presentation.pptx", streamRef);

            _generateButton.HideLoading();
        }
        finally
        {
            if (!string.IsNullOrEmpty(fileName))
            {
                File.Delete(fileName);
            }
        }
    }

    [JSInvokable]
    public Task<string> HandlePaste(string currentText, string pastedText)
    {
        if (!string.IsNullOrWhiteSpace(currentText)) return Task.FromResult(string.Empty);
        
        var transformed = TransformPastedText(pastedText);
        Song.Liedtekst = transformed;
        StateHasChanged(); // Update de UI
        return Task.FromResult(transformed);
    }

    private static string TransformPastedText(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        input = input.Replace("\r\n", "\n").Replace("\r", "\n");
        input = Regex.Replace(input, @"(\n){4,}", "\n\n\n");

        var lines = input.Split('\n');
        var result = new List<string>();
        int bufferCount = 0;

        for (int i = 0; i < lines.Length; i++)
        {
            string line = lines[i];
            result.Add(line);

            if (!string.IsNullOrWhiteSpace(line))
            {
                bufferCount++;
            }
            else
            {
                bufferCount = 0;
            }

            bool nextExists = i + 1 < lines.Length;
            if (bufferCount == 2 && nextExists && !string.IsNullOrWhiteSpace(lines[i + 1]))
            {
                result.Add(""); // witregel
                bufferCount = 0;
            }
        }

        return string.Join("\n", result);
    }

    private string ToLabel(string name)
    {
        var r = new Regex(@"
                (?<=[A-Z])(?=[A-Z][a-z]) |
                 (?<=[^A-Z])(?=[A-Z]) |
                 (?<=[A-Za-z])(?=[^A-Za-z])", RegexOptions.IgnorePatternWhitespace);


        var label = r.Replace(name, " ").ToLower();
        
        return $"{label.First().ToString().ToUpper()}{label.Substring(1)}";
    }
}